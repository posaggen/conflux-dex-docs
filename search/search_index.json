{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Conflux DEX is a decentralized exchange infrastructure based on Conflux, which is made up of ShuttleFlow , BoomFlow and MatchFlow . ShuttleFlow is used to transfer assets from Bitcoin or Ethereum to Conflux chain. BoomFlow is set of smart contracts on Conflux chain for user assets management and trade settlement. MatchFlow is an order book based matching engine, which provides REST APIs for users to place/cancel orders.","title":"Welcome to Conflux DEX"},{"location":"boomflow/","text":"Welcome to BoomFlow BoomFlow contains two kinds of smart contracts: CRC-L and Boomflow. CRC-L stands for CRC Lock , it is used to lock user assets and only the authorized user or contract could change the user assets. Now, each asset has a separate CRC-L contract. Boomflow contract is responsible for trade settlement and authorized to change user assets in CRC-L contracts. Now, these contracts are not open sourced yet, and only the Matchflow has authority to access these contracts. Javascript SDK There are two Javascript SDKs available on npm for frontend and backend respectively. Each SDK enables whitelisted users to call functions in smart contracts directly or interact with Conflux DEX REST APIs to place/cancel orders. boomflow : SDK for backend development. Usually, it uses private key or keyfile to sign messages. boomflow frontend : SDK for frontend development. Usually, it uses Conflux Portal to sign messages.","title":"Introduction"},{"location":"boomflow/#welcome-to-boomflow","text":"BoomFlow contains two kinds of smart contracts: CRC-L and Boomflow. CRC-L stands for CRC Lock , it is used to lock user assets and only the authorized user or contract could change the user assets. Now, each asset has a separate CRC-L contract. Boomflow contract is responsible for trade settlement and authorized to change user assets in CRC-L contracts. Now, these contracts are not open sourced yet, and only the Matchflow has authority to access these contracts.","title":"Welcome to BoomFlow"},{"location":"boomflow/#javascript-sdk","text":"There are two Javascript SDKs available on npm for frontend and backend respectively. Each SDK enables whitelisted users to call functions in smart contracts directly or interact with Conflux DEX REST APIs to place/cancel orders. boomflow : SDK for backend development. Usually, it uses private key or keyfile to sign messages. boomflow frontend : SDK for frontend development. Usually, it uses Conflux Portal to sign messages.","title":"Javascript SDK"},{"location":"matchflow/","text":"Welcome to MatchFlow MatchFlow provides REST API and WebSocket API to place/cancel orders or query market data. Now, MatchFlow have two environments main net and test net, which are used for real trading and simulated trading respectively. Environments API MAINNET TESTNET COMMENT REST API https://api.matchflow.io https://dev.matchflow.io Document WebSocket API wss://api.matchflow.io/ws wss://dev.matchflow.io/ws Document Note, only whitelisted users could access the APIs of main net. Change Logs 2020/04/17 Add new REST API: get incompleted orders. System Optimization: WebSocket, on-chain settlement. Fix bug in FC smart contract. Auto-pause mechansim in case of on-chain settlement exception. 2020/04/09 Server migrate to Tokyo region. System optimization. 2020/03/26 New features Transfer in Conflux DEX REST API changes New added Transfer List transfer records Updated Place order: add fee related fields 2020/03/11 New features Daily limit REST API changes New added Get daily limit of product Get daily limit rate of product Get last closing price of product Updated Currency: add ERC777 contract address 2020/03/06 New features Instant exchange REST API changes New added Get Boomflow address Updated Withdraw: add timestamp field Place order: add timestamp field Cancel order: add timestamp field Cancel order by client order ID: add timestamp field Get user: nonce removed Removed Batch cancel orders User login/logout","title":"Introduction"},{"location":"matchflow/#welcome-to-matchflow","text":"MatchFlow provides REST API and WebSocket API to place/cancel orders or query market data. Now, MatchFlow have two environments main net and test net, which are used for real trading and simulated trading respectively.","title":"Welcome to MatchFlow"},{"location":"matchflow/#environments","text":"API MAINNET TESTNET COMMENT REST API https://api.matchflow.io https://dev.matchflow.io Document WebSocket API wss://api.matchflow.io/ws wss://dev.matchflow.io/ws Document Note, only whitelisted users could access the APIs of main net.","title":"Environments"},{"location":"matchflow/#change-logs","text":"","title":"Change Logs"},{"location":"matchflow/#20200417","text":"Add new REST API: get incompleted orders. System Optimization: WebSocket, on-chain settlement. Fix bug in FC smart contract. Auto-pause mechansim in case of on-chain settlement exception.","title":"2020/04/17"},{"location":"matchflow/#20200409","text":"Server migrate to Tokyo region. System optimization.","title":"2020/04/09"},{"location":"matchflow/#20200326","text":"New features Transfer in Conflux DEX REST API changes New added Transfer List transfer records Updated Place order: add fee related fields","title":"2020/03/26"},{"location":"matchflow/#20200311","text":"New features Daily limit REST API changes New added Get daily limit of product Get daily limit rate of product Get last closing price of product Updated Currency: add ERC777 contract address","title":"2020/03/11"},{"location":"matchflow/#20200306","text":"New features Instant exchange REST API changes New added Get Boomflow address Updated Withdraw: add timestamp field Place order: add timestamp field Cancel order: add timestamp field Cancel order by client order ID: add timestamp field Get user: nonce removed Removed Batch cancel orders User login/logout","title":"2020/03/06"},{"location":"matchflow/eip712/","text":"Why EIP712 To avoid transaction replay attack in different Conflux chains, Conflux DEX follow the way of EIP712 to sign requests from users, which will be validated in MatchFlow and BoomFlow . General Values in HEX format have 0x prefix. Some values (e.g. amount , price ) are BigDecimal or double types, and need to convert to big number in drip format when interact with blockchain. Basically, the formula is: big number = decimal * 10^18 . EIP712 Domain Primary type: EIP712Domain Boomflow Domain NAME TYPE VALUE name string Boomflow version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /common/boomflow CRCL Domain NAME TYPE VALUE name string CRCL version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /currencies/${name} In the response of REST API /currencies/${name} , use contractAddress as CRCL contract address, while tokenAddress is the corresponding ERC777 contract address. chainId is 0 by default, however, client should always retrieve it from Conflux RPC server. E.g. call getStatus to get chain ID in Javascript program. Place Order Domain: Boomflow Domain Primary type: Order Schema NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip price uint256 big number in drip orderType uint256 limit order: 0, market order: 1 side bool buy order: true, sell order: false salt uint256 order timestamp baseAssetAddress address HEX format quoteAssetAddress address HEX format feeAddress address HEX format makerFeePercentage uint256 big number in drip takerFeePercentage uint256 big number in drip Cancel Order Domain: Boomflow Domain Primary type: CancelRequest Schema NAME TYPE VALUE order order schema placed order nonce uint256 order cancellation timestamp Withdraw Domain: CRCL Domain Primary type: WithdrawRequest Schema NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip recipient address HEX format isCrosschain bool nonce uint256 withdraw timestamp Transfer Domain: CRCL Domain Primary type: TransferRequest Schema NAME TYPE VALUE userAddress address HEX format amounts uint256[] big number in drip recipients address[] HEX format nonce uint256 transfer timestamp","title":"EIP712 Signature"},{"location":"matchflow/eip712/#why-eip712","text":"To avoid transaction replay attack in different Conflux chains, Conflux DEX follow the way of EIP712 to sign requests from users, which will be validated in MatchFlow and BoomFlow .","title":"Why EIP712"},{"location":"matchflow/eip712/#general","text":"Values in HEX format have 0x prefix. Some values (e.g. amount , price ) are BigDecimal or double types, and need to convert to big number in drip format when interact with blockchain. Basically, the formula is: big number = decimal * 10^18 .","title":"General"},{"location":"matchflow/eip712/#eip712-domain","text":"Primary type: EIP712Domain","title":"EIP712 Domain"},{"location":"matchflow/eip712/#boomflow-domain","text":"NAME TYPE VALUE name string Boomflow version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /common/boomflow","title":"Boomflow Domain"},{"location":"matchflow/eip712/#crcl-domain","text":"NAME TYPE VALUE name string CRCL version string 1.0 chainId uint256 Retrieve from Conflux RPC server verifyingContract address REST API: /currencies/${name} In the response of REST API /currencies/${name} , use contractAddress as CRCL contract address, while tokenAddress is the corresponding ERC777 contract address. chainId is 0 by default, however, client should always retrieve it from Conflux RPC server. E.g. call getStatus to get chain ID in Javascript program.","title":"CRCL Domain"},{"location":"matchflow/eip712/#place-order","text":"Domain: Boomflow Domain Primary type: Order","title":"Place Order"},{"location":"matchflow/eip712/#schema","text":"NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip price uint256 big number in drip orderType uint256 limit order: 0, market order: 1 side bool buy order: true, sell order: false salt uint256 order timestamp baseAssetAddress address HEX format quoteAssetAddress address HEX format feeAddress address HEX format makerFeePercentage uint256 big number in drip takerFeePercentage uint256 big number in drip","title":"Schema"},{"location":"matchflow/eip712/#cancel-order","text":"Domain: Boomflow Domain Primary type: CancelRequest","title":"Cancel Order"},{"location":"matchflow/eip712/#schema_1","text":"NAME TYPE VALUE order order schema placed order nonce uint256 order cancellation timestamp","title":"Schema"},{"location":"matchflow/eip712/#withdraw","text":"Domain: CRCL Domain Primary type: WithdrawRequest","title":"Withdraw"},{"location":"matchflow/eip712/#schema_2","text":"NAME TYPE VALUE userAddress address HEX format amount uint256 big number in drip recipient address HEX format isCrosschain bool nonce uint256 withdraw timestamp","title":"Schema"},{"location":"matchflow/eip712/#transfer","text":"Domain: CRCL Domain Primary type: TransferRequest","title":"Transfer"},{"location":"matchflow/eip712/#schema_3","text":"NAME TYPE VALUE userAddress address HEX format amounts uint256[] big number in drip recipients address[] HEX format nonce uint256 transfer timestamp","title":"Schema"},{"location":"matchflow/frontend/","text":"If you want to develop a decentralized exchange (DEX) on Conflux chain, MatchFlow is a good choice for you to quickly get start. Why MatchFlow MatchFlow provides APIs to place/cancel orders and query market data. Therefore, you need only to develop a mobile app or web page, and integrates with MatchFlow REST API and WebSocket API . Besides, MatchFlow API allow to set specific trade fee rate/recipient, app could earn trade fee from every order matching. Migrate from CEX MatchFlow provides standard REST and WebSocket APIs following popular centralized exchanges. Any centralized exchange app or web page could easily migrate to Conflux DEX. The only difference between decentralized exchange (DEX) and centralized exchange (DEX) is that Conflux DEX do not requires username/password based login. Instead, Conflux DEX requires user signature to validate authority when user want to place or cancel orders. EIP712 Signature Some REST APIs requires user signature to change user assets: Place order Cancel order Withdraw Transfer Conflux DEX follow the way of EIP712 to validate signed messages, any app based on MatchFlow is required to follow the type schema to sign messages. boomflow frontend SDK is the recommended SDK to interact with MatchFlow for signature required REST APIs.","title":"Frontend Integration"},{"location":"matchflow/frontend/#why-matchflow","text":"MatchFlow provides APIs to place/cancel orders and query market data. Therefore, you need only to develop a mobile app or web page, and integrates with MatchFlow REST API and WebSocket API . Besides, MatchFlow API allow to set specific trade fee rate/recipient, app could earn trade fee from every order matching.","title":"Why MatchFlow"},{"location":"matchflow/frontend/#migrate-from-cex","text":"MatchFlow provides standard REST and WebSocket APIs following popular centralized exchanges. Any centralized exchange app or web page could easily migrate to Conflux DEX. The only difference between decentralized exchange (DEX) and centralized exchange (DEX) is that Conflux DEX do not requires username/password based login. Instead, Conflux DEX requires user signature to validate authority when user want to place or cancel orders.","title":"Migrate from CEX"},{"location":"matchflow/frontend/#eip712-signature","text":"Some REST APIs requires user signature to change user assets: Place order Cancel order Withdraw Transfer Conflux DEX follow the way of EIP712 to validate signed messages, any app based on MatchFlow is required to follow the type schema to sign messages. boomflow frontend SDK is the recommended SDK to interact with MatchFlow for signature required REST APIs.","title":"EIP712 Signature"},{"location":"matchflow/market_maker/","text":"A market maker can easily interact with MatchFlow via REST API and WebSocket API . Firstly, please refer to the document to add a new account in Conflux DEX. After that, market maker could call REST APIs to place orders or cancel orders . Unlike centralized exchanges, Conflux DEX requires EIP712 based user signature to place an order. Accordingly, market maker need to follow the type schema to sign place/cancel order request.","title":"Market Maker"},{"location":"matchflow/reg_user/","text":"Unlike the centralized exchange, Conflux DEX do not require user to register an account via REST API in MatchFlow. Because, Conflux DEX is a decentralized exchange and user assets are all locked in smart contracts on Conflux chain. User need to interact with CRC-L contract for user registration in Conflux DEX. Add User When user deposit assets into CRC-L contracts, MatchFlow listens and polls the deposit event data once the deposit transaction executed and confirmed on Conflux chain. After that, MatchFlow will add or update the account balance in off-chain ledger (database). Generally, the transaction confirmation time on Conflux chain is no more than one minute, so user will be able to place orders after one minute of deposit. API The recommended way to deposit assets is using boomflow frontend SDK , and the available asset list could be retrieved from MatchFlow REST API getCurrencies . Each asset has two contract addresses: contractAddress : asset CRC-L contract address, which is used for DEX only. tokenAddress : asset ERC777 token contract address, which is used for any dapps. With boomflow frontend SDK, user assets could be easily depsoited from ERC777 contract to CRC-L contract.","title":"User Registration"},{"location":"matchflow/reg_user/#add-user","text":"When user deposit assets into CRC-L contracts, MatchFlow listens and polls the deposit event data once the deposit transaction executed and confirmed on Conflux chain. After that, MatchFlow will add or update the account balance in off-chain ledger (database). Generally, the transaction confirmation time on Conflux chain is no more than one minute, so user will be able to place orders after one minute of deposit.","title":"Add User"},{"location":"matchflow/reg_user/#api","text":"The recommended way to deposit assets is using boomflow frontend SDK , and the available asset list could be retrieved from MatchFlow REST API getCurrencies . Each asset has two contract addresses: contractAddress : asset CRC-L contract address, which is used for DEX only. tokenAddress : asset ERC777 token contract address, which is used for any dapps. With boomflow frontend SDK, user assets could be easily depsoited from ERC777 contract to CRC-L contract.","title":"API"},{"location":"matchflow/ws/","text":"MatchFlow WebSocket API MatchFlow WebSocket API provides pub/sub way to monitor the market data and user data, including orders, trades and balance changes. General Websocket URL ws://${conflux_dex_url}/ws Heartbeat and Connection Websocket server will send PING heartbeat message periodically (20 seconds) with an integer number. When client receives the heartbeat message, it should response with a matching PONG message which has the same integer number. Websocket server will disconnect clients if there is no communication message (inclues PING message) in 30 seconds. On the other hand, Websocket server will periodically (20 seconds) disconnect clients if no topic subscribed. Subscribe to Topic To subscribe a topic, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": true, \"arguments\": {} } The arguments is used to specify additional parameters to subscribe a topic, e.g. specify user address to subscribe Asset or Order related topics. Unsubscribe To unsubscribe, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": false } Topic Response Websocket server push messages of different topics in the same format as below: { \"topic\": \"topic name\", \"timestamp\": 1582609926336, \"data\": {} } As for the data value, please refer to the Update Content that defined for each topic. Market Data Best Bid/Offer Topic market.$product.bbo Update Content public class BestBidOffer { /** * Product name. */ private String product; /** * Quote timestamp. */ private Instant quoteTime; /** * Best bid price. */ private BigDecimal bid; /** * Best bid amount. */ private BigDecimal bidAmount; /** * Best bid order count. */ private int bidCount; /** * Best ask price. */ private BigDecimal ask; /** * Best ask amount. */ private BigDecimal askAmount; /** * Best ask order count. */ private int askCount; } Market Depth Topic market.$product.depth.$step $step : market depth aggregation level, including \"step0\", \"step1\", \"step2\", \"step3\", \"step4\" and \"step5\". For \"step0\", market depth data supports up to 150 levels. For others, market depth data supports up to 20 levels. Update Content { \"Buy\": [{}], \"Sell\": [{}] } public class DepthPriceLevel { /** * Order price. */ private BigDecimal price; /** * Total amount in all orders. */ private BigDecimal amount; /** * Total number of all orders. */ private int count; } Market Details in Last 24 Hours Topic market.$product.detail Update Content public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; } Market Tick Topic market.$product.tick.$granularity $granularity : tick granularity, including 1min, 5min, 15min, 30min, 60min, 1day, 1week and 1month. Update Content public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; } Trade Detail Topic market.$product.trade.detail Update Content public class Trade { /** * Trade id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Referenced taker order id. */ private long takerOrderId; /** * Referenced maker order id. */ private long makerOrderId; /** * Trade price from maker order. */ private BigDecimal price; /** * Trade amount. */ private BigDecimal amount; /** * Taker order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Trade fee of taker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal takerFee; /** * Trade fee of maker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal makerFee; /** * Settlement status: \"OffChainSettled\", \"OnChainSettled\", \"OnChainConfirmed\". */ private SettlementStatus status = SettlementStatus.OffChainSettled; /** * Transaction hash of settlement on blockchain. */ private String txHash; /** * Transaction nonce of settlement on blockchain. */ private long txNonce; /** * Create timestamp. */ private Timestamp createTime = Timestamp.from(Instant.now()); /** * Update timestamp. */ private Timestamp updateTime = this.createTime; } Asset and Order Account Updates Topic accounts Arguments address : user address. model : trigger mode in integer type. 0: Only update when account balance changed; 1: Update when either account balance changed or available balance changed. Update Content public class BalanceChange { /** * Balance change type, including \"OrderPlace\", \"OrderMatch\", \"OrderCancel\", * \"Deposit\", \"Withdraw\" and \"Transfer\". */ private BalanceChangeType type; /** * The account id of the changed balance. */ private long accountId; /** * The currency name of the changed balance. */ private String currency; /** * Account balance (only exists when account balance changed). */ private BigDecimal balance; /** * Available balance (only exists when available balance changed). */ private BigDecimal available; /** * Change time, unix timestamp in milliseconds. */ private long changeTime; } Order Updates Topic order.$product $product : product name or * for all products. Arguments address : user address. Update Content public class OrderChange { /** * Changed order ID. */ private long id; /** * Optional client defined order identity, which is unique for a user. */ private String clientOrderId; /** * Product ID of the changed order. */ private int productId; /** * Order type: \"Limit\", \"Market\". */ private OrderType type; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Order status: \"New\", \"Open\", \"Cancelling\", \"Cancelled\", \"Filled\". */ private OrderStatus status; /** * Order price for \"Limit\" order type only. */ private BigDecimal price; /** * Order amount for \"Limit\" order type or \"Market-Sell\" order. * For \"Market-Buy\" order, it is the total order value. */ private BigDecimal amount; /** * For order matched event, it indicates whether it is a taker order. * For order status changed event, it is true by default. */ private boolean taker; /** * Trade price (only exists for order matched event). */ private BigDecimal tradePrice; /** * Trade amount (only exists for order matched event). */ private BigDecimal tradeAmount; /** * Trade fee (only exists for order matched event). * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Filled amount of base currency. */ private BigDecimal filledAmount; /** * Filled funds of quote currency. */ private BigDecimal filledFunds; } Trade Details Topic trade.$product $product : product name or * for all products. Arguments address : user address. Update Content public class UserTrade { /** * Trade ID. */ private long id; /** * Product ID. */ private int productId; /** * Order ID. */ private long orderId; /** * Order type: \"Limit\", \"Market\". */ private OrderType orderType; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide orderSide; /** * Trade price from maker order. */ private BigDecimal tradePrice; /** * Trade amount. */ private BigDecimal tradeAmount; /** * Trade fee. * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Whether the trade is from taker order. */ private boolean taker; /** * Trade time, unix timestamp in milliseconds. */ private long tradeTime; }","title":"WebSocket API"},{"location":"matchflow/ws/#matchflow-websocket-api","text":"MatchFlow WebSocket API provides pub/sub way to monitor the market data and user data, including orders, trades and balance changes.","title":"MatchFlow WebSocket API"},{"location":"matchflow/ws/#general","text":"","title":"General"},{"location":"matchflow/ws/#websocket-url","text":"ws://${conflux_dex_url}/ws","title":"Websocket URL"},{"location":"matchflow/ws/#heartbeat-and-connection","text":"Websocket server will send PING heartbeat message periodically (20 seconds) with an integer number. When client receives the heartbeat message, it should response with a matching PONG message which has the same integer number. Websocket server will disconnect clients if there is no communication message (inclues PING message) in 30 seconds. On the other hand, Websocket server will periodically (20 seconds) disconnect clients if no topic subscribed.","title":"Heartbeat and Connection"},{"location":"matchflow/ws/#subscribe-to-topic","text":"To subscribe a topic, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": true, \"arguments\": {} } The arguments is used to specify additional parameters to subscribe a topic, e.g. specify user address to subscribe Asset or Order related topics.","title":"Subscribe to Topic"},{"location":"matchflow/ws/#unsubscribe","text":"To unsubscribe, please send below message to Websocket server: { \"topic\": \"topic name\", \"sub\": false }","title":"Unsubscribe"},{"location":"matchflow/ws/#topic-response","text":"Websocket server push messages of different topics in the same format as below: { \"topic\": \"topic name\", \"timestamp\": 1582609926336, \"data\": {} } As for the data value, please refer to the Update Content that defined for each topic.","title":"Topic Response"},{"location":"matchflow/ws/#market-data","text":"","title":"Market Data"},{"location":"matchflow/ws/#best-bidoffer","text":"","title":"Best Bid/Offer"},{"location":"matchflow/ws/#topic","text":"market.$product.bbo","title":"Topic"},{"location":"matchflow/ws/#update-content","text":"public class BestBidOffer { /** * Product name. */ private String product; /** * Quote timestamp. */ private Instant quoteTime; /** * Best bid price. */ private BigDecimal bid; /** * Best bid amount. */ private BigDecimal bidAmount; /** * Best bid order count. */ private int bidCount; /** * Best ask price. */ private BigDecimal ask; /** * Best ask amount. */ private BigDecimal askAmount; /** * Best ask order count. */ private int askCount; }","title":"Update Content"},{"location":"matchflow/ws/#market-depth","text":"","title":"Market Depth"},{"location":"matchflow/ws/#topic_1","text":"market.$product.depth.$step $step : market depth aggregation level, including \"step0\", \"step1\", \"step2\", \"step3\", \"step4\" and \"step5\". For \"step0\", market depth data supports up to 150 levels. For others, market depth data supports up to 20 levels.","title":"Topic"},{"location":"matchflow/ws/#update-content_1","text":"{ \"Buy\": [{}], \"Sell\": [{}] } public class DepthPriceLevel { /** * Order price. */ private BigDecimal price; /** * Total amount in all orders. */ private BigDecimal amount; /** * Total number of all orders. */ private int count; }","title":"Update Content"},{"location":"matchflow/ws/#market-details-in-last-24-hours","text":"","title":"Market Details in Last 24 Hours"},{"location":"matchflow/ws/#topic_2","text":"market.$product.detail","title":"Topic"},{"location":"matchflow/ws/#update-content_2","text":"public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; }","title":"Update Content"},{"location":"matchflow/ws/#market-tick","text":"","title":"Market Tick"},{"location":"matchflow/ws/#topic_3","text":"market.$product.tick.$granularity $granularity : tick granularity, including 1min, 5min, 15min, 30min, 60min, 1day, 1week and 1month.","title":"Topic"},{"location":"matchflow/ws/#update-content_3","text":"public class Tick implements Cloneable { /** * Tick id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Tick granularity in minutes. */ private int granularity; /** * Tick open value. */ private BigDecimal open; /** * Tick high value. */ private BigDecimal high; /** * Tick low value. */ private BigDecimal low; /** * Tick close value. */ private BigDecimal close; /** * Total volume of base currency. */ private BigDecimal baseCurrencyVolume; /** * Total volume of quote currency. */ private BigDecimal quoteCurrencyVolume; /** * Total number of trades. */ private int count; /** * Tick creation timestamp. */ private Timestamp createTime; /** * Last update timestamp. */ private Timestamp updateTime; }","title":"Update Content"},{"location":"matchflow/ws/#trade-detail","text":"","title":"Trade Detail"},{"location":"matchflow/ws/#topic_4","text":"market.$product.trade.detail","title":"Topic"},{"location":"matchflow/ws/#update-content_4","text":"public class Trade { /** * Trade id. (auto-generated) */ private long id; /** * Referenced product id. */ private int productId; /** * Referenced taker order id. */ private long takerOrderId; /** * Referenced maker order id. */ private long makerOrderId; /** * Trade price from maker order. */ private BigDecimal price; /** * Trade amount. */ private BigDecimal amount; /** * Taker order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Trade fee of taker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal takerFee; /** * Trade fee of maker side. * For \"Buy\" order, it is base currency. * For \"Sell\" order, it is quote currency. */ private BigDecimal makerFee; /** * Settlement status: \"OffChainSettled\", \"OnChainSettled\", \"OnChainConfirmed\". */ private SettlementStatus status = SettlementStatus.OffChainSettled; /** * Transaction hash of settlement on blockchain. */ private String txHash; /** * Transaction nonce of settlement on blockchain. */ private long txNonce; /** * Create timestamp. */ private Timestamp createTime = Timestamp.from(Instant.now()); /** * Update timestamp. */ private Timestamp updateTime = this.createTime; }","title":"Update Content"},{"location":"matchflow/ws/#asset-and-order","text":"","title":"Asset and Order"},{"location":"matchflow/ws/#account-updates","text":"","title":"Account Updates"},{"location":"matchflow/ws/#topic_5","text":"accounts","title":"Topic"},{"location":"matchflow/ws/#arguments","text":"address : user address. model : trigger mode in integer type. 0: Only update when account balance changed; 1: Update when either account balance changed or available balance changed.","title":"Arguments"},{"location":"matchflow/ws/#update-content_5","text":"public class BalanceChange { /** * Balance change type, including \"OrderPlace\", \"OrderMatch\", \"OrderCancel\", * \"Deposit\", \"Withdraw\" and \"Transfer\". */ private BalanceChangeType type; /** * The account id of the changed balance. */ private long accountId; /** * The currency name of the changed balance. */ private String currency; /** * Account balance (only exists when account balance changed). */ private BigDecimal balance; /** * Available balance (only exists when available balance changed). */ private BigDecimal available; /** * Change time, unix timestamp in milliseconds. */ private long changeTime; }","title":"Update Content"},{"location":"matchflow/ws/#order-updates","text":"","title":"Order Updates"},{"location":"matchflow/ws/#topic_6","text":"order.$product $product : product name or * for all products.","title":"Topic"},{"location":"matchflow/ws/#arguments_1","text":"address : user address.","title":"Arguments"},{"location":"matchflow/ws/#update-content_6","text":"public class OrderChange { /** * Changed order ID. */ private long id; /** * Optional client defined order identity, which is unique for a user. */ private String clientOrderId; /** * Product ID of the changed order. */ private int productId; /** * Order type: \"Limit\", \"Market\". */ private OrderType type; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide side; /** * Order status: \"New\", \"Open\", \"Cancelling\", \"Cancelled\", \"Filled\". */ private OrderStatus status; /** * Order price for \"Limit\" order type only. */ private BigDecimal price; /** * Order amount for \"Limit\" order type or \"Market-Sell\" order. * For \"Market-Buy\" order, it is the total order value. */ private BigDecimal amount; /** * For order matched event, it indicates whether it is a taker order. * For order status changed event, it is true by default. */ private boolean taker; /** * Trade price (only exists for order matched event). */ private BigDecimal tradePrice; /** * Trade amount (only exists for order matched event). */ private BigDecimal tradeAmount; /** * Trade fee (only exists for order matched event). * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Filled amount of base currency. */ private BigDecimal filledAmount; /** * Filled funds of quote currency. */ private BigDecimal filledFunds; }","title":"Update Content"},{"location":"matchflow/ws/#trade-details","text":"","title":"Trade Details"},{"location":"matchflow/ws/#topic_7","text":"trade.$product $product : product name or * for all products.","title":"Topic"},{"location":"matchflow/ws/#arguments_2","text":"address : user address.","title":"Arguments"},{"location":"matchflow/ws/#update-content_7","text":"public class UserTrade { /** * Trade ID. */ private long id; /** * Product ID. */ private int productId; /** * Order ID. */ private long orderId; /** * Order type: \"Limit\", \"Market\". */ private OrderType orderType; /** * Order side: \"Buy\", \"Sell\". */ private OrderSide orderSide; /** * Trade price from maker order. */ private BigDecimal tradePrice; /** * Trade amount. */ private BigDecimal tradeAmount; /** * Trade fee. * * For taker order trade, it is calculated by taker fee rate. * For maker order trade, it is calculated by maker fee rate. * * For \"Buy\" order trade, it is base currency. * For \"Sell\" order trade, it is quote currency. */ private BigDecimal tradeFee; /** * Whether the trade is from taker order. */ private boolean taker; /** * Trade time, unix timestamp in milliseconds. */ private long tradeTime; }","title":"Update Content"},{"location":"shuttleflow/","text":"Conflux Shuttleflow Shuttleflow is Conflux cross chain solution to integrate user assets from bitcoin and ethereum. It provides following cross chain functionalities: * Support assets cross chain migration between conflux and bitcoin/ethereum/erc20 token. * Enable anybody to add new cross chain erc20 token. * Wrapping cross chain migration from ethereum defi to conflux defi(vice versa) to an atomic operation. Terminologies Cross chain asset(reference token) : The external chain asset that can be migrated to conflux chain by shuttleflow. Such as BTC, ETH, USDT. cToken(Conflux Token) : An ERC777 token on conflux backed 1:1 by tokens from other blockchain. e.g. 1 cBTC is backed by 1 bitcoin. User : The people who want to transfer assets from other blockchain to Conflux using shuttleflow. Token Sponsor : The sponsor of a specific cross chain asset. When user want to add a new erc20 to cross chain assets, he/she need to become the sponsor of that erc20 token, meanwhile some cETH should be mortgaged by the sponsor to conflux cross chain smart contract, which is used to reimburse the cross chain ethereum transaction fee of custodian alliance, the sponsor will be able to obtain and configure the mint/burn operation fee for user who want to migrate the corresponding erc20 token. Custodian Member : A member of custodian alliance, holds 6 private keys: hot/cold wallet of conflux/ethereum/bitcoin chain. Custodian Node : Custodian service run independently by each custodian member, which hosts the hot wallet private key of custodian member, monitor the blockchain data and sign user's mint/burn requests, settle the mint/burn transactions on chain automatically when more than 2/3 signatures are collected. Custodian Alliance : A group of custodian members. Custodian alliance is able to mint/burn cToken for users when signatures from more than 2/3 custodian members are collected. It also maintain hot & cold wallet to manage users' cross chain assets. Custodian Hot Wallet : The multisig wallets of custodian alliance controlled by hot wallet private key of custodian members, which hold the users assets from other blockchain (the assets transferred to payment wallets). Custodian Cold Wallet : The multisig wallets of custodian alliance controlled by cold wallet private key of custodian members. When amount of assets in alliance hot wallet is larger than upper bound, the part exceed the bound will be moved to cold wallet. This rest document is organized as in the following sections: Shuttle-in/out Process Shuttleflow Contracts Custodian Node (under development)","title":"Introduction"},{"location":"shuttleflow/#conflux-shuttleflow","text":"Shuttleflow is Conflux cross chain solution to integrate user assets from bitcoin and ethereum. It provides following cross chain functionalities: * Support assets cross chain migration between conflux and bitcoin/ethereum/erc20 token. * Enable anybody to add new cross chain erc20 token. * Wrapping cross chain migration from ethereum defi to conflux defi(vice versa) to an atomic operation.","title":"Conflux Shuttleflow"},{"location":"shuttleflow/#terminologies","text":"Cross chain asset(reference token) : The external chain asset that can be migrated to conflux chain by shuttleflow. Such as BTC, ETH, USDT. cToken(Conflux Token) : An ERC777 token on conflux backed 1:1 by tokens from other blockchain. e.g. 1 cBTC is backed by 1 bitcoin. User : The people who want to transfer assets from other blockchain to Conflux using shuttleflow. Token Sponsor : The sponsor of a specific cross chain asset. When user want to add a new erc20 to cross chain assets, he/she need to become the sponsor of that erc20 token, meanwhile some cETH should be mortgaged by the sponsor to conflux cross chain smart contract, which is used to reimburse the cross chain ethereum transaction fee of custodian alliance, the sponsor will be able to obtain and configure the mint/burn operation fee for user who want to migrate the corresponding erc20 token. Custodian Member : A member of custodian alliance, holds 6 private keys: hot/cold wallet of conflux/ethereum/bitcoin chain. Custodian Node : Custodian service run independently by each custodian member, which hosts the hot wallet private key of custodian member, monitor the blockchain data and sign user's mint/burn requests, settle the mint/burn transactions on chain automatically when more than 2/3 signatures are collected. Custodian Alliance : A group of custodian members. Custodian alliance is able to mint/burn cToken for users when signatures from more than 2/3 custodian members are collected. It also maintain hot & cold wallet to manage users' cross chain assets. Custodian Hot Wallet : The multisig wallets of custodian alliance controlled by hot wallet private key of custodian members, which hold the users assets from other blockchain (the assets transferred to payment wallets). Custodian Cold Wallet : The multisig wallets of custodian alliance controlled by cold wallet private key of custodian members. When amount of assets in alliance hot wallet is larger than upper bound, the part exceed the bound will be moved to cold wallet. This rest document is organized as in the following sections: Shuttle-in/out Process Shuttleflow Contracts Custodian Node (under development)","title":"Terminologies"},{"location":"shuttleflow/custodian/","text":"Custodian Node Each member of custodian alliance need to run a custodian node, all custodian nodes form a p2p network. Design Goals The custodian node have following design goals: Monitor conflux, ethereum smart contract events and bitcoin transactions to synchronize user requests and custodian operations, e.g. mint, burn. Collect signatures from other custodian nodes in p2p network, automatically send transactions on different blockchain to process user request or custodian operations when over 2/3 signatures are collected. Since the custodian alliance share one hot multi-signature wallet for bitcoin and ethereum, different custodian node should be consistent in the way to process an request, e.g., pick the same utxos of bitcoin hot wallet for a user withdraw request. All communications with other custodian nodes should be validated. Components Design and Implementation Configuration A custodian node should be configured with the private keys and other information of a custodian member, see README for detail. P2P Network All custodian nodes broadcast messages in a gossip p2p network with following configurations: Name Description p2p_throttle_duration p2p message throttle time window duration p2p_throttle_max maximum number of message from a socket in one time window fanout fan-out of p2p network Connection Authentication All new connection to a p2p server of custodian node will be authenticated. The request header of any new connection must has following three fields: timestamp utc timestamp when clients try to connect to server signer conflux address of a custodian member signature the signature of a custodian member for a message which is the concatenation of server host ip and timestamp On the server side, the signature is checked and the connection is authenticated if the timestamp is larger than any successful connections of signer before, which ensure the signature of same timestamp cannot be reused. RPC Custodian node provides multiple RPC for the frontend to display process of user operation and custodian alliance status. See JSON-RPC part of README . Message Authentication All incoming messages from other custodian node will be authenticated in two steps: The whole message should be signed by a current custodian member with its conflux private key. Furthermore, for different type of user operations, this ensure the message is sent by a custodian member. Each message contains the parameters of a specific operation, the hash of the operation and signature of hash of a valid custodian member. The custodian node who received this message will first compute the operation hash with the operation parameters in the message and check if it is equal to the hash provided in the message, then validate the signature of hash. The operation hash here will also be checked in the smart contract of Shuttleflow when an operation is settled on chain. Since custodian member can change, if the message from a peer is signed by address which is not member of current custodian alliance, the connection will be dropped. User Payment Wallet Ethereum Payment Wallet The ethereum payment wallet for user is a smart contract on ethereum chain, which is used to receive eth and erc20 token from user. Each user has a unique payment wallet contract for specific conflux defi registered in conflux cross chain governance contract. When user transfer eth or erc20 token to the payment wallet contract, the custodian alliance will mint corresponding cToken and CRC-L token for user. Bitcoin Payment Wallet The bitcoin payment wallet for user is a special multi-sig wallet with following bitcoin script(scriptPubKey): ${user_conflux_address} ${conflux_defi_address} OP_DROP ${M} ${public_key_1} ${public_key_2} ... ${public_key_N} ${N} OP_CHECKMULTISIG ```` where `${N}` is the total number of custodian members, `${M}` denotes the required minimum number of signatures from different custodian members, `${public_key_i}` is the public key of i-th custodian member. Any one want to spend the utxo with the scriptPubKey above need to provide a scriptSig: OP_0 ${signature_1} ${signature_2} ... ${signature_M} ``` Blockchain Monitoring Custodian node will monitor the contract events emitted by Shuttleflow smart contract and bitcoin transaction to user payment wallet. This table shows the contract event monitored by custodian node: Contract Event Description CustodianCore MemberChange Custodian membership changed CustodianCore BtcHotToCold New transfer operation from bitcoin hot wallet to cold wallet TokenBase Minted User mint operation finished TokenBase Burnt New user withdraw operation EthFactory BurnSuccess User ETH withdraw operation finished EthFactory BurnSuccessERC20 User ERC20 withdraw operation finished EthFactory WalletTransfer An operation using cold private key finished EthFactory shareProfitETH Transferred profit(ETH) to a custodian member EthFactory shareProfitERC20 Transferred profit(ERC20) to a custodian member EthFactory HotToCold Transfer from hot wallet to cold wallet finished EthFactory HotToColdDetail Detail of a specific token of a HotToCold operation ERC20(e.g. USDT) Transfer User pay to the payment wallet, new mint operation For bitcoin, since there is no smart contract and event, the operation params will be stored in OP_RETURN of any transaction sent from custodian alliance, the custodian monitor the bitcoin transactions to update local operation status.","title":"Custodian Node"},{"location":"shuttleflow/custodian/#custodian-node","text":"Each member of custodian alliance need to run a custodian node, all custodian nodes form a p2p network.","title":"Custodian Node"},{"location":"shuttleflow/custodian/#design-goals","text":"The custodian node have following design goals: Monitor conflux, ethereum smart contract events and bitcoin transactions to synchronize user requests and custodian operations, e.g. mint, burn. Collect signatures from other custodian nodes in p2p network, automatically send transactions on different blockchain to process user request or custodian operations when over 2/3 signatures are collected. Since the custodian alliance share one hot multi-signature wallet for bitcoin and ethereum, different custodian node should be consistent in the way to process an request, e.g., pick the same utxos of bitcoin hot wallet for a user withdraw request. All communications with other custodian nodes should be validated.","title":"Design Goals"},{"location":"shuttleflow/custodian/#components-design-and-implementation","text":"","title":"Components Design and Implementation"},{"location":"shuttleflow/custodian/#configuration","text":"A custodian node should be configured with the private keys and other information of a custodian member, see README for detail.","title":"Configuration"},{"location":"shuttleflow/custodian/#p2p-network","text":"All custodian nodes broadcast messages in a gossip p2p network with following configurations: Name Description p2p_throttle_duration p2p message throttle time window duration p2p_throttle_max maximum number of message from a socket in one time window fanout fan-out of p2p network","title":"P2P Network"},{"location":"shuttleflow/custodian/#connection-authentication","text":"All new connection to a p2p server of custodian node will be authenticated. The request header of any new connection must has following three fields: timestamp utc timestamp when clients try to connect to server signer conflux address of a custodian member signature the signature of a custodian member for a message which is the concatenation of server host ip and timestamp On the server side, the signature is checked and the connection is authenticated if the timestamp is larger than any successful connections of signer before, which ensure the signature of same timestamp cannot be reused.","title":"Connection Authentication"},{"location":"shuttleflow/custodian/#rpc","text":"Custodian node provides multiple RPC for the frontend to display process of user operation and custodian alliance status. See JSON-RPC part of README .","title":"RPC"},{"location":"shuttleflow/custodian/#message-authentication","text":"All incoming messages from other custodian node will be authenticated in two steps: The whole message should be signed by a current custodian member with its conflux private key. Furthermore, for different type of user operations, this ensure the message is sent by a custodian member. Each message contains the parameters of a specific operation, the hash of the operation and signature of hash of a valid custodian member. The custodian node who received this message will first compute the operation hash with the operation parameters in the message and check if it is equal to the hash provided in the message, then validate the signature of hash. The operation hash here will also be checked in the smart contract of Shuttleflow when an operation is settled on chain. Since custodian member can change, if the message from a peer is signed by address which is not member of current custodian alliance, the connection will be dropped.","title":"Message Authentication"},{"location":"shuttleflow/custodian/#user-payment-wallet","text":"","title":"User Payment Wallet"},{"location":"shuttleflow/custodian/#ethereum-payment-wallet","text":"The ethereum payment wallet for user is a smart contract on ethereum chain, which is used to receive eth and erc20 token from user. Each user has a unique payment wallet contract for specific conflux defi registered in conflux cross chain governance contract. When user transfer eth or erc20 token to the payment wallet contract, the custodian alliance will mint corresponding cToken and CRC-L token for user.","title":"Ethereum Payment Wallet"},{"location":"shuttleflow/custodian/#bitcoin-payment-wallet","text":"The bitcoin payment wallet for user is a special multi-sig wallet with following bitcoin script(scriptPubKey): ${user_conflux_address} ${conflux_defi_address} OP_DROP ${M} ${public_key_1} ${public_key_2} ... ${public_key_N} ${N} OP_CHECKMULTISIG ```` where `${N}` is the total number of custodian members, `${M}` denotes the required minimum number of signatures from different custodian members, `${public_key_i}` is the public key of i-th custodian member. Any one want to spend the utxo with the scriptPubKey above need to provide a scriptSig: OP_0 ${signature_1} ${signature_2} ... ${signature_M} ```","title":"Bitcoin Payment Wallet"},{"location":"shuttleflow/custodian/#blockchain-monitoring","text":"Custodian node will monitor the contract events emitted by Shuttleflow smart contract and bitcoin transaction to user payment wallet. This table shows the contract event monitored by custodian node: Contract Event Description CustodianCore MemberChange Custodian membership changed CustodianCore BtcHotToCold New transfer operation from bitcoin hot wallet to cold wallet TokenBase Minted User mint operation finished TokenBase Burnt New user withdraw operation EthFactory BurnSuccess User ETH withdraw operation finished EthFactory BurnSuccessERC20 User ERC20 withdraw operation finished EthFactory WalletTransfer An operation using cold private key finished EthFactory shareProfitETH Transferred profit(ETH) to a custodian member EthFactory shareProfitERC20 Transferred profit(ERC20) to a custodian member EthFactory HotToCold Transfer from hot wallet to cold wallet finished EthFactory HotToColdDetail Detail of a specific token of a HotToCold operation ERC20(e.g. USDT) Transfer User pay to the payment wallet, new mint operation For bitcoin, since there is no smart contract and event, the operation params will be stored in OP_RETURN of any transaction sent from custodian alliance, the custodian monitor the bitcoin transactions to update local operation status.","title":"Blockchain Monitoring"},{"location":"shuttleflow/custodian_core/","text":"CustodianCore CustodianCore is the governance contract of custodian alliance on Conflux chain. It maintains the information of custodian members and configurations for custodian nodes, including: * Custodian member's address/public key of different chain * The address of all cTokens and their configurations such as mint/burn fee * The information of token sponsors * The upper/lower bounds of custodian alliance's bitcoin hot wallet Ownership and authorities At this point, the owner of CustodianCore is Conflux admin, who is enabled to modify custodian node configurations and custodian membership. CustodianCore is the owner of all cToken so only it has the authority to mint cTokens. Contract ABI CustodianCore ABI Core Storage Variables ITokenBase[] public token_list; Registered cTokens. mapping(address => string) public token_reference; Mapping of cToken address to external chain assets(reference), reference can be 'eth'/'btc'/lowercase erc20 address. For example, cETH address => 'eth', cBTC address => 'btc', cUSDT address => '0xdac17f958d2ee523a2206206994597c13d831ec7'. mapping(address => uint8) public token_decimals; Mapping of cToken address to external chain decimals. For example, cETH address => 18, cBTC address => 8, cUSDT address => 6. mapping(string => bool) public admin_token; Denote each cToken is admin token or not. Admin token can only be sponsored by whitelist admin of custodian core contract, and will maintain both hot and cold wallet. For non-admin token, anyone can be its sponsor and only hot wallet will be maintained. mapping(string => address) reference_token; // inverse token_reference Anti mapping of token_reference . mapping(string => uint256) public burn_fee; The fee taken from user during cToken burn. Note the decimals is decimals of the reference token. For example, the sponsor want to take 0.1 cUSDT when user burn cUSDT, here burn_fee['usdt'] should be 0.1 * 1e6. mapping(string => uint256) public mint_fee; The fee taken from user during cToken mint. Note the decimals is decimals of the reference token. mapping(string => uint256) public wallet_fee; When a user want to migrate token from ethereum to conflux, his/her receive wallet will be deployed firstly if it is not deployed before. wallet_fee denote the fee taken from user during deployment of receive wallet. Note the decimals is decimals of the reference token. mapping(string => uint256) public minimal_mint_value; The remaining value of reference token in user's receive wallet must be larger than minimal mint value, otherwise the custodian alliance will not mint for it. Note : for btc, use btc_minimal_mint_value . uint256 public btc_minimal_mint_value cBTC minimal mint value. mapping(string => uint256) public minimal_burn_value; The minimal burn value of corresponding cToken, the burn will fail if burn value is not enough. Note : for btc, use btc_minimal_burn_value . uint256 public btc_minimal_burn_value; cBTC minimal burn value. mapping(string => uint256) public minimal_burn_value; The minimal burn value of corresponding cToken, the burn will fail if burn value is not enough. mapping(string => uint256) public token_cooldown; // second This can only set by custodian core whitelist admin. The token spnosor should not change the token parameters frequently, so the sponsor must wait a cooldown after the token parameters is changed. Core Functions: function sponsorToken( string memory ref, // lowercase erc20 ethereum address uint256 amount, // amount of cETH mortgaged uint256 _burn_fee, // burn fee of erc20 token, in erc20 decimals uint256 _mint_fee, // mint fee of erc20 token, in erc20 decimals uint256 _wallet_fee, // receive wallet fee of erc20 token, in erc20 decimals uint256 _minimal_mint_value, // minimal mint value of erc20 token, in erc20 decimals uint256 _minimal_burn_value // minimal burn value of erc20 token, in erc20 decimals ) public; This function can be called by anyone. This function helps msg.sender become the sponsor of an erc20 token, specified by ref . The governance contract will transfer amount cETH from msg.sender by operator authority, and compare the amount to the current sponsor of ref (if exists), the sponsor will be replaced by msg.sender if amount is large enough. The token parameters of ref will also be replaced by the parameters sender provided, if the token is not in cooldown. For more information of sponsor replacement logic, see token sponsor . function setTokenParams( string memory ref, // lowercase erc20 ethereum address uint256 _burn_fee, uint256 _mint_fee, uint256 _wallet_fee, uint256 _minimal_mint_value, uint256 _minimal_burn_value ) public; This function can be called by anyone. This function helps the sponsor of token ref to change the token parameters if the token is not in cooldown.","title":"Custodian core"},{"location":"shuttleflow/custodian_core/#custodiancore","text":"CustodianCore is the governance contract of custodian alliance on Conflux chain. It maintains the information of custodian members and configurations for custodian nodes, including: * Custodian member's address/public key of different chain * The address of all cTokens and their configurations such as mint/burn fee * The information of token sponsors * The upper/lower bounds of custodian alliance's bitcoin hot wallet","title":"CustodianCore"},{"location":"shuttleflow/custodian_core/#ownership-and-authorities","text":"At this point, the owner of CustodianCore is Conflux admin, who is enabled to modify custodian node configurations and custodian membership. CustodianCore is the owner of all cToken so only it has the authority to mint cTokens.","title":"Ownership and authorities"},{"location":"shuttleflow/custodian_core/#contract-abi","text":"CustodianCore ABI","title":"Contract ABI"},{"location":"shuttleflow/custodian_core/#core-storage-variables","text":"ITokenBase[] public token_list; Registered cTokens. mapping(address => string) public token_reference; Mapping of cToken address to external chain assets(reference), reference can be 'eth'/'btc'/lowercase erc20 address. For example, cETH address => 'eth', cBTC address => 'btc', cUSDT address => '0xdac17f958d2ee523a2206206994597c13d831ec7'. mapping(address => uint8) public token_decimals; Mapping of cToken address to external chain decimals. For example, cETH address => 18, cBTC address => 8, cUSDT address => 6. mapping(string => bool) public admin_token; Denote each cToken is admin token or not. Admin token can only be sponsored by whitelist admin of custodian core contract, and will maintain both hot and cold wallet. For non-admin token, anyone can be its sponsor and only hot wallet will be maintained. mapping(string => address) reference_token; // inverse token_reference Anti mapping of token_reference . mapping(string => uint256) public burn_fee; The fee taken from user during cToken burn. Note the decimals is decimals of the reference token. For example, the sponsor want to take 0.1 cUSDT when user burn cUSDT, here burn_fee['usdt'] should be 0.1 * 1e6. mapping(string => uint256) public mint_fee; The fee taken from user during cToken mint. Note the decimals is decimals of the reference token. mapping(string => uint256) public wallet_fee; When a user want to migrate token from ethereum to conflux, his/her receive wallet will be deployed firstly if it is not deployed before. wallet_fee denote the fee taken from user during deployment of receive wallet. Note the decimals is decimals of the reference token. mapping(string => uint256) public minimal_mint_value; The remaining value of reference token in user's receive wallet must be larger than minimal mint value, otherwise the custodian alliance will not mint for it. Note : for btc, use btc_minimal_mint_value . uint256 public btc_minimal_mint_value cBTC minimal mint value. mapping(string => uint256) public minimal_burn_value; The minimal burn value of corresponding cToken, the burn will fail if burn value is not enough. Note : for btc, use btc_minimal_burn_value . uint256 public btc_minimal_burn_value; cBTC minimal burn value. mapping(string => uint256) public minimal_burn_value; The minimal burn value of corresponding cToken, the burn will fail if burn value is not enough. mapping(string => uint256) public token_cooldown; // second This can only set by custodian core whitelist admin. The token spnosor should not change the token parameters frequently, so the sponsor must wait a cooldown after the token parameters is changed.","title":"Core Storage Variables"},{"location":"shuttleflow/custodian_core/#core-functions","text":"function sponsorToken( string memory ref, // lowercase erc20 ethereum address uint256 amount, // amount of cETH mortgaged uint256 _burn_fee, // burn fee of erc20 token, in erc20 decimals uint256 _mint_fee, // mint fee of erc20 token, in erc20 decimals uint256 _wallet_fee, // receive wallet fee of erc20 token, in erc20 decimals uint256 _minimal_mint_value, // minimal mint value of erc20 token, in erc20 decimals uint256 _minimal_burn_value // minimal burn value of erc20 token, in erc20 decimals ) public; This function can be called by anyone. This function helps msg.sender become the sponsor of an erc20 token, specified by ref . The governance contract will transfer amount cETH from msg.sender by operator authority, and compare the amount to the current sponsor of ref (if exists), the sponsor will be replaced by msg.sender if amount is large enough. The token parameters of ref will also be replaced by the parameters sender provided, if the token is not in cooldown. For more information of sponsor replacement logic, see token sponsor . function setTokenParams( string memory ref, // lowercase erc20 ethereum address uint256 _burn_fee, uint256 _mint_fee, uint256 _wallet_fee, uint256 _minimal_mint_value, uint256 _minimal_burn_value ) public; This function can be called by anyone. This function helps the sponsor of token ref to change the token parameters if the token is not in cooldown.","title":"Core Functions:"},{"location":"shuttleflow/defi_relayer/","text":"DefiRelayer Contract code see DefiRelayer.sol","title":"Defi relayer"},{"location":"shuttleflow/defi_relayer/#defirelayer","text":"","title":"DefiRelayer"},{"location":"shuttleflow/defi_relayer/#contract-code","text":"see DefiRelayer.sol","title":"Contract code"},{"location":"shuttleflow/deposit_relayer/","text":"DepositRelayer DepositRelayer is used for user to initiate a crosschain transaction. Contract ABI DepositRelayer ABI Core Functions function deposit(address confluxAddr, address defiAddr) public payable; For users want to crosschain native token such as ETH/BNB, they should call this function and transfer the value they want to crosschain. confluxAddr is user's Conflux recipient address in hex format. defiAddr should be zero address. function depositToken( address tokenAddr, address confluxAddr, address defiAddr, uint256 value ) public; For users want to crosschain ERC20 token, they should first approve enough allowance for DepositRelayer contract, and then call this function. tokenAddr is the ERC20 token address. confluxAddr is user's Conflux recipient address in hex format. defiAddr should be zero address. value is amount of ERC20 token user want to crosschain.","title":"Deposit relayer"},{"location":"shuttleflow/deposit_relayer/#depositrelayer","text":"DepositRelayer is used for user to initiate a crosschain transaction.","title":"DepositRelayer"},{"location":"shuttleflow/deposit_relayer/#contract-abi","text":"DepositRelayer ABI","title":"Contract ABI"},{"location":"shuttleflow/deposit_relayer/#core-functions","text":"function deposit(address confluxAddr, address defiAddr) public payable; For users want to crosschain native token such as ETH/BNB, they should call this function and transfer the value they want to crosschain. confluxAddr is user's Conflux recipient address in hex format. defiAddr should be zero address. function depositToken( address tokenAddr, address confluxAddr, address defiAddr, uint256 value ) public; For users want to crosschain ERC20 token, they should first approve enough allowance for DepositRelayer contract, and then call this function. tokenAddr is the ERC20 token address. confluxAddr is user's Conflux recipient address in hex format. defiAddr should be zero address. value is amount of ERC20 token user want to crosschain.","title":"Core Functions"},{"location":"shuttleflow/eth_factory/","text":"EthFactory EthFactory (contracts/factory/EthFactory.sol) is the governance contract of custodian alliance on Ethereum chain. It maintains the information of custodian members and configurations for custodian nodes, including: * Custodian member's ethereum address * The registered defi relayer contracts. * The upper/lower bounds of custodian alliance's eth&erc20 hot wallet Ownership and authorities: * At this point, the owner of EthFactory is Conflux admin, who is enabled to modify custodian node configurations and custodian membership. * CustodianCore is the owner of all cToken so only it has the authority to mint cTokens. Upgrade: * EthFactory follows proxy delegate pattern which enables upgrading contract logic without modification of contract address and get rid of data migration. Core Functions: function burn( address token, address payable toAddress, address payable defi_relayer, uint256 amount, string memory tx_id, bytes[] memory signatures ) public; Only custodian member can call it. Withdraw eth/erc20 token to user's address. This functions needs over 2/3 signatures from current custodian members. If provided defi_relayer is registered, the token will be sent to defi_relayer by calling its deposit for depositToken . Specifically, if token is zero address(denote ETH) and defi_relayer is not used, the withdrawed eth will be firstly sent to the msg.sender (custodian member who settled this burn request), and then msg.sender will send these ETH to toAddress (user address). This avoids some user withdraw ETH directly to the address of some centralized exchange, which is not able to detect the internal ETH transaction in a contract call. ReceiveWallet ReceiveWallet (or payment wallet) is the contract of receive wallet of custodian alliance for user. The receive wallet can only transfer eth/erc20 token to the address of EthFactory, which is initialized when receive wallet contract construction and can not be modified in future. Core Functions: function retrieve( address token, // erc20 address or zero address for ETH uint256 deploy_fee, uint256 retrieve_fee ) public; Only custodian member or Create2Factory contract can call it. Transfer all eth/erc20 token to EthFactory contract. Where deploy_fee is the fee for deployment of receive wallet, retrieve_fee is the fee for custodian member to move these token from user's receive wallet to hot wallet(governance contract). Create2Factory Create2Factory is the generator of user payment wallet. It can calculate the address of payment wallet of a specific user conflux address before the payment wallet contract is really deployed. This contract enable the custodian alliance provide the payment wallet address to user and deploy the payment wallet contract after they received at least one payment from user. function deploy( bytes memory code, uint256 salt, address token, uint256 deploy_fee, uint256 retrieve_fee ) public; Only custodian member can call it. Deploy the receive wallet of user for specific defi(encoded in salt ), and call the retrieve function of the receive wallet deployed, with deploy_fee.","title":"Eth factory"},{"location":"shuttleflow/eth_factory/#ethfactory","text":"EthFactory (contracts/factory/EthFactory.sol) is the governance contract of custodian alliance on Ethereum chain. It maintains the information of custodian members and configurations for custodian nodes, including: * Custodian member's ethereum address * The registered defi relayer contracts. * The upper/lower bounds of custodian alliance's eth&erc20 hot wallet Ownership and authorities: * At this point, the owner of EthFactory is Conflux admin, who is enabled to modify custodian node configurations and custodian membership. * CustodianCore is the owner of all cToken so only it has the authority to mint cTokens. Upgrade: * EthFactory follows proxy delegate pattern which enables upgrading contract logic without modification of contract address and get rid of data migration.","title":"EthFactory"},{"location":"shuttleflow/eth_factory/#core-functions","text":"function burn( address token, address payable toAddress, address payable defi_relayer, uint256 amount, string memory tx_id, bytes[] memory signatures ) public; Only custodian member can call it. Withdraw eth/erc20 token to user's address. This functions needs over 2/3 signatures from current custodian members. If provided defi_relayer is registered, the token will be sent to defi_relayer by calling its deposit for depositToken . Specifically, if token is zero address(denote ETH) and defi_relayer is not used, the withdrawed eth will be firstly sent to the msg.sender (custodian member who settled this burn request), and then msg.sender will send these ETH to toAddress (user address). This avoids some user withdraw ETH directly to the address of some centralized exchange, which is not able to detect the internal ETH transaction in a contract call.","title":"Core Functions:"},{"location":"shuttleflow/eth_factory/#receivewallet","text":"ReceiveWallet (or payment wallet) is the contract of receive wallet of custodian alliance for user. The receive wallet can only transfer eth/erc20 token to the address of EthFactory, which is initialized when receive wallet contract construction and can not be modified in future. Core Functions: function retrieve( address token, // erc20 address or zero address for ETH uint256 deploy_fee, uint256 retrieve_fee ) public; Only custodian member or Create2Factory contract can call it. Transfer all eth/erc20 token to EthFactory contract. Where deploy_fee is the fee for deployment of receive wallet, retrieve_fee is the fee for custodian member to move these token from user's receive wallet to hot wallet(governance contract).","title":"ReceiveWallet"},{"location":"shuttleflow/eth_factory/#create2factory","text":"Create2Factory is the generator of user payment wallet. It can calculate the address of payment wallet of a specific user conflux address before the payment wallet contract is really deployed. This contract enable the custodian alliance provide the payment wallet address to user and deploy the payment wallet contract after they received at least one payment from user. function deploy( bytes memory code, uint256 salt, address token, uint256 deploy_fee, uint256 retrieve_fee ) public; Only custodian member can call it. Deploy the receive wallet of user for specific defi(encoded in salt ), and call the retrieve function of the receive wallet deployed, with deploy_fee.","title":"Create2Factory"},{"location":"shuttleflow/smart_contract/","text":"The Shuttleflow Smart Contracts Design and Implementation Design Goals The Shuttleflow smart contracts have following design goals: Support atomic mapping between Conflux cToken and cross chain assets including BTC, ETH and ERC20 tokens. Maintain the membership and authority of custodian alliance. Pausable and upgradable, data migration. The code of smart contract will open source in future. Components (on Conflux) CustodianCore : crosschain goverance contract TokenSponsor : token sponsor contract TokenBase : cToken contract Components (on Ethereum) EthFactory : crosschain goverance contract on ethereum DefiRelayer : the defi relayer contract for defi on ethereum who want to receive assets migrated from conflux chain.","title":"The Shuttleflow Smart Contracts Design and Implementation"},{"location":"shuttleflow/smart_contract/#the-shuttleflow-smart-contracts-design-and-implementation","text":"","title":"The Shuttleflow Smart Contracts Design and Implementation"},{"location":"shuttleflow/smart_contract/#design-goals","text":"The Shuttleflow smart contracts have following design goals: Support atomic mapping between Conflux cToken and cross chain assets including BTC, ETH and ERC20 tokens. Maintain the membership and authority of custodian alliance. Pausable and upgradable, data migration. The code of smart contract will open source in future.","title":"Design Goals"},{"location":"shuttleflow/smart_contract/#components-on-conflux","text":"CustodianCore : crosschain goverance contract TokenSponsor : token sponsor contract TokenBase : cToken contract","title":"Components (on Conflux)"},{"location":"shuttleflow/smart_contract/#components-on-ethereum","text":"EthFactory : crosschain goverance contract on ethereum DefiRelayer : the defi relayer contract for defi on ethereum who want to receive assets migrated from conflux chain.","title":"Components (on Ethereum)"},{"location":"shuttleflow/token_base/","text":"TokenBase TokenBase is the cross chain token contract (cToken). It follows ERC777 standard except the burn function. Owership and autorities Owner of cToken is initially who deployed it (Shuttleflow admin), then the ownership will be transfered to Shuttleflow governance contract. Only owner of the contract is able to mint cToken. Only pausers are able to pause/unpause the cToken contract. Initially, the pauser of cToken is Shuttleflow admin. Contract ABI TokenBase ABI Contract Interface pragma solidity 0.5.11; interface ITokenBase { function name() external view returns (string memory); function symbol() external view returns (string memory); function decimals() external pure returns (uint8); function granularity() external pure returns (uint256); function totalSupply() external view returns (uint256); function balanceOf(address tokenHolder) external view returns (uint256); function send( address recipient, uint256 amount, bytes calldata data ) external; function transfer(address recipient, uint256 amount) external returns (bool); function isOperatorFor(address operator, address tokenHolder) external view returns (bool); function authorizeOperator(address operator) external; function revokeOperator(address operator) external; function defaultOperators() external view returns (address[] memory); function operatorSend( address sender, address recipient, uint256 amount, bytes calldata data, bytes calldata operatorData ) external; function allowance(address holder, address spender) external view returns (uint256); function approve(address spender, uint256 value) external returns (bool); function transferFrom( address holder, address recipient, uint256 amount ) external returns (bool); function mint( address account, uint256 amount, address fee_address, uint256 fee, address defi, string calldata tx_id ) external returns (bool); function burn( address user_addr, uint256 amount, uint256 expected_fee, string calldata addr, address defi_relayer ) external returns (bool); } Core Functions TokenBase implements the functions of ERC777 standard, with a different burn function: function burn( address user_addr, // user conflux address uint256 amount, // burn amount uint256 expected_fee, // expected burn fee, in 18 decimals string memory addr, // external chain receive address address defi_relayer // external chain defi relayer address ) public; Burn cToken from sender's address. user_addr is used to logging, in case Conflux Defi burn cToken for normal user. amount should be larger than burn_fee and minimal_burn_value in CustodianCore contract(Note here the decimals of amount is 18 and decimals of burn_fee and minimal_burn_value in CustoidanCore contract is reference token's decimal, the smart contract will do the decimal conversion for comparison). Besides, if the fee is higher than expected_fee , the burn transaction will revert. addr is a ethereum or bitcoin address, which the reference token will be sent to. If it is a burnt of eth/erc20 tokens, user can specify a defi_relayer , which will send the eth/erc20 to defi_relayer and logging the user's information. See more in defi relayer . If user does not want to use defi_relayer , fill it with zero address. For example, burn(cusdt_address, 1e18, 1e16, user_eth_addr, zero_addr) will burn 1 cUSDT and user is willing to pay no more than 0.01 cUSDT as burn fee to sponsor. The burned usdt will directly sent to user_eth_addr.","title":"Token base"},{"location":"shuttleflow/token_base/#tokenbase","text":"TokenBase is the cross chain token contract (cToken). It follows ERC777 standard except the burn function.","title":"TokenBase"},{"location":"shuttleflow/token_base/#owership-and-autorities","text":"Owner of cToken is initially who deployed it (Shuttleflow admin), then the ownership will be transfered to Shuttleflow governance contract. Only owner of the contract is able to mint cToken. Only pausers are able to pause/unpause the cToken contract. Initially, the pauser of cToken is Shuttleflow admin.","title":"Owership and autorities"},{"location":"shuttleflow/token_base/#contract-abi","text":"TokenBase ABI","title":"Contract ABI"},{"location":"shuttleflow/token_base/#contract-interface","text":"pragma solidity 0.5.11; interface ITokenBase { function name() external view returns (string memory); function symbol() external view returns (string memory); function decimals() external pure returns (uint8); function granularity() external pure returns (uint256); function totalSupply() external view returns (uint256); function balanceOf(address tokenHolder) external view returns (uint256); function send( address recipient, uint256 amount, bytes calldata data ) external; function transfer(address recipient, uint256 amount) external returns (bool); function isOperatorFor(address operator, address tokenHolder) external view returns (bool); function authorizeOperator(address operator) external; function revokeOperator(address operator) external; function defaultOperators() external view returns (address[] memory); function operatorSend( address sender, address recipient, uint256 amount, bytes calldata data, bytes calldata operatorData ) external; function allowance(address holder, address spender) external view returns (uint256); function approve(address spender, uint256 value) external returns (bool); function transferFrom( address holder, address recipient, uint256 amount ) external returns (bool); function mint( address account, uint256 amount, address fee_address, uint256 fee, address defi, string calldata tx_id ) external returns (bool); function burn( address user_addr, uint256 amount, uint256 expected_fee, string calldata addr, address defi_relayer ) external returns (bool); }","title":"Contract Interface"},{"location":"shuttleflow/token_base/#core-functions","text":"TokenBase implements the functions of ERC777 standard, with a different burn function: function burn( address user_addr, // user conflux address uint256 amount, // burn amount uint256 expected_fee, // expected burn fee, in 18 decimals string memory addr, // external chain receive address address defi_relayer // external chain defi relayer address ) public; Burn cToken from sender's address. user_addr is used to logging, in case Conflux Defi burn cToken for normal user. amount should be larger than burn_fee and minimal_burn_value in CustodianCore contract(Note here the decimals of amount is 18 and decimals of burn_fee and minimal_burn_value in CustoidanCore contract is reference token's decimal, the smart contract will do the decimal conversion for comparison). Besides, if the fee is higher than expected_fee , the burn transaction will revert. addr is a ethereum or bitcoin address, which the reference token will be sent to. If it is a burnt of eth/erc20 tokens, user can specify a defi_relayer , which will send the eth/erc20 to defi_relayer and logging the user's information. See more in defi relayer . If user does not want to use defi_relayer , fill it with zero address. For example, burn(cusdt_address, 1e18, 1e16, user_eth_addr, zero_addr) will burn 1 cUSDT and user is willing to pay no more than 0.01 cUSDT as burn fee to sponsor. The burned usdt will directly sent to user_eth_addr.","title":"Core Functions"},{"location":"shuttleflow/token_sponsor/","text":"TokenSponsor TokenSponsor is the contract to manage sponsor information of cross chain tokens. Core Storage Variables mapping(string => address) token_sponsor; Mapping of reference token to its sponsor's conflux address. mapping(string => uint256) token_sponsor_value; Mapping of reference token to its remaining sponsored cETH value. uint256 public sponsor_replace_ratio; // per cent A percent ratio when a user want to replace the sponsor of a token t , he/she must mortgage more than token_sponsor_value[t]*(100+sponsor_replace_ratio)/100 cETH.","title":"Token sponsor"},{"location":"shuttleflow/token_sponsor/#tokensponsor","text":"TokenSponsor is the contract to manage sponsor information of cross chain tokens.","title":"TokenSponsor"},{"location":"shuttleflow/token_sponsor/#core-storage-variables","text":"mapping(string => address) token_sponsor; Mapping of reference token to its sponsor's conflux address. mapping(string => uint256) token_sponsor_value; Mapping of reference token to its remaining sponsored cETH value. uint256 public sponsor_replace_ratio; // per cent A percent ratio when a user want to replace the sponsor of a token t , he/she must mortgage more than token_sponsor_value[t]*(100+sponsor_replace_ratio)/100 cETH.","title":"Core Storage Variables"},{"location":"shuttleflow/workflow/","text":"The Shuttleflow Work Process In this section, we will introduce the work process of shuttleflow: user migrate asset from Ethereum to Conflux (Shuttle-in) and transfer back to Ethereum (Shuttle-out). Shuttle-in When users want to migrate assets on Ethereum such as ETH or ERC20 token to Conflux: Send an Ethereum transaction to call Deposit Relayer contract , in this transaction, user will specify the token, value and Conflux recipient address. Check corresponding cToken balance in conflux wallet after custodian alliance processed user's request. Shuttle-out When users already have some cToken and want to migrate them back to Ethereum: Send a Conflux transaction to call the burn function of cToken , in this transaction, user will specify the value, max tolerable shuttle-out fee and Ethereum ricipent address. Check ETH or corresponding ERC20 balance in Ethereum wallet after custodian alliance processed user's request.","title":"The Shuttleflow Work Process"},{"location":"shuttleflow/workflow/#the-shuttleflow-work-process","text":"In this section, we will introduce the work process of shuttleflow: user migrate asset from Ethereum to Conflux (Shuttle-in) and transfer back to Ethereum (Shuttle-out).","title":"The Shuttleflow Work Process"},{"location":"shuttleflow/workflow/#shuttle-in","text":"When users want to migrate assets on Ethereum such as ETH or ERC20 token to Conflux: Send an Ethereum transaction to call Deposit Relayer contract , in this transaction, user will specify the token, value and Conflux recipient address. Check corresponding cToken balance in conflux wallet after custodian alliance processed user's request.","title":"Shuttle-in"},{"location":"shuttleflow/workflow/#shuttle-out","text":"When users already have some cToken and want to migrate them back to Ethereum: Send a Conflux transaction to call the burn function of cToken , in this transaction, user will specify the value, max tolerable shuttle-out fee and Ethereum ricipent address. Check ETH or corresponding ERC20 balance in Ethereum wallet after custodian alliance processed user's request.","title":"Shuttle-out"}]}